var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { GoogleSpreadsheet } from "google-spreadsheet";
import { Client as MapsClient, } from "@googlemaps/google-maps-services-js";
import { JWT } from "google-auth-library";
import { parse } from "url";
import escapeHtml from "escape-html";
const GOOGLE_GEOCODE_API_KEY = process.env.GOOGLE_GEOCODE_API_KEY;
const mapJsText = `"use strict";

function initMap() {
  const mapOptions = {
    zoom: 10,
    center: new google.maps.LatLng(0, 0),
  };
  const map = new google.maps.Map(document.getElementById("map"), mapOptions);
  const bounds = new google.maps.LatLngBounds();
  const infowindow = new google.maps.InfoWindow({
    content: "",
  });
  
  const markers = window._LOCATIONS.filter(loc => {
    return loc.lat && loc.lon && loc.icon !== "none";
  });
  markers.forEach(loc => {
    const marker = createMarker(map, loc, infowindow);
    bounds.extend(marker.position);
  });
  if (!markers.length) {
    bounds.union(new google.maps.LatLngBounds(window._DEFAULT_BOUNDS));
  }
  map.fitBounds(bounds);
}

function createMarker(map, loc, infowindow) {
  // Icons
  // https://stackoverflow.com/questions/8248077/google-maps-v3-standard-icon-shadow-names-equiv-of-g-default-icon-in-v2
  const marker = new google.maps.Marker({
    icon: \`http://maps.google.com/mapfiles/ms/icons/\${loc.icon}.png\`,
    position: {
      lat: parseFloat(loc.lat),
      lng: parseFloat(loc.lon),
    },
    map: map,
    title: loc.q,
  });
  google.maps.event.addListener(marker, "click", function () {
    infowindow.setContent(
      \`<div>
        <p><strong>\${loc.q}: \${loc.answer || ""} [\${loc.owner}]</strong></p>
        <p>\${loc.location}</p>
        <p>\${loc.addr}</p>
      </div>\`
    );
    infowindow.open(map, marker);
  });
  return marker;
}
`;
// Initialize auth - see https://theoephraim.github.io/node-google-spreadsheet/#/guides/authentication
const serviceAccountAuth = new JWT({
    // env var values here are copied from service account credentials generated by google
    // see "Authentication" section in docs for more info
    email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
    key: process.env.GOOGLE_PRIVATE_KEY,
    scopes: ["https://www.googleapis.com/auth/spreadsheets"],
});
// For geocoding searches (only a suggestion)
const SF_BOUNDS = {
    north: 37.821658,
    east: -122.381396,
    south: 37.732201,
    west: -122.51681,
};
const BOUNDS = {
    northeast: {
        lat: SF_BOUNDS.north,
        lng: SF_BOUNDS.east,
    },
    southwest: {
        lat: SF_BOUNDS.south,
        lng: SF_BOUNDS.west,
    },
};
const googleMapsClient = new MapsClient({});
function bestAddr(options) {
    if (options.length > 1) {
        console.log("Choosing first option:", options[0].formatted_address);
        options.slice(1).forEach((opt) => {
            console.log("* Alternative:", opt.formatted_address);
        });
    }
    return options[0];
}
function fetchRows(spreadsheetId, tab) {
    return __awaiter(this, void 0, void 0, function* () {
        const doc = new GoogleSpreadsheet(spreadsheetId, serviceAccountAuth);
        yield doc.loadInfo();
        const worksheet = doc.sheetsByTitle[tab];
        if (!worksheet) {
            throw new Error("Could not find tab with title: " + tab);
        }
        const rows = yield worksheet.getRows({});
        const rv = yield Promise.all(rows.map((row) => __awaiter(this, void 0, void 0, function* () {
            const location = row.get("Location") || "";
            const src = row.get("Src") || "";
            const err = row.get("Err") || "";
            if (location === "" && src === "") {
                if (err !== "") {
                    row.set("Err", "");
                    yield row.save();
                }
            }
            else if (src !== location) {
                if (location === "") {
                    row.set("Addr", "");
                    row.set("Lat", "");
                    row.set("Lon", "");
                    row.set("Src", location);
                    row.set("Err", "");
                    yield row.save();
                }
                else {
                    const response = yield googleMapsClient.geocode({
                        params: {
                            key: GOOGLE_GEOCODE_API_KEY,
                            address: row.get("Location") || "",
                            bounds: BOUNDS,
                        },
                    });
                    try {
                        console.log("geocode response", response);
                        if (response.data.error_message) {
                            throw new Error(JSON.stringify(response.data.error_message));
                        }
                        else if (response.data.results.length === 0) {
                            throw new Error("No results found");
                        }
                        const addr = bestAddr(response.data.results);
                        row.set("Addr", addr.formatted_address);
                        row.set("Lat", addr.geometry.location.lat);
                        row.set("Lon", addr.geometry.location.lng);
                        row.set("Src", row.get("Location"));
                        row.set("Err", "");
                        yield row.save();
                    }
                    catch (err) {
                        if (!(err instanceof Error)) {
                            throw new Error("Expected error object: " + err);
                        }
                        console.error("Geocode error:", err.toString());
                        row.set("Addr", "");
                        row.set("Lat", "");
                        row.set("Lon", "");
                        row.set("Src", "");
                        row.set("Err", err.toString());
                        yield row.save();
                    }
                }
            }
            return {
                q: row.get("Q"),
                location: row.get("Location"),
                lat: row.get("Lat"),
                lon: row.get("Lon"),
                addr: row.get("Addr"),
                owner: row.get("Owner"),
                points: row.get("Pts"),
                icon: row.get("Icon") || "tree",
            };
        })));
        return rv;
    });
}
export const config = {};
function tabsPage(spreadsheetId) {
    return __awaiter(this, void 0, void 0, function* () {
        const doc = new GoogleSpreadsheet(spreadsheetId, serviceAccountAuth);
        yield doc.loadInfo();
        return doc.sheetsByIndex
            .map((sheet) => {
            return `<a href="${encodeURIComponent(spreadsheetId)}/${encodeURIComponent(sheet.title)}">${escapeHtml(sheet.title)}</a><br/>`;
        })
            .join("\n");
    });
}
function respondMap(spreadsheetId, tab) {
    return __awaiter(this, void 0, void 0, function* () {
        const rows = yield fetchRows(spreadsheetId, tab);
        return `<!DOCTYPE html>
      <html>
        <head>
          <title>${escapeHtml(`Map ${tab}`)}</title>
          <meta name="viewport" content="initial-scale=1.0">
          <meta charset="utf-8">
          <style>
            /* Always set the map height explicitly to define the size of the div
            * element that contains the map. */
            #map {
              height: 100%;
            }
            /* Optional: Makes the sample page fill the window. */
            html, body {
              height: 100%;
              margin: 0;
              padding: 0;
            }
          </style>
        </head>
        <body>
          <div id="map"></div>
          <script>
            window._DEFAULT_BOUNDS = ${JSON.stringify(SF_BOUNDS)};
            window._LOCATIONS = ${JSON.stringify(rows)};
          </script>
          <script>${mapJsText}</script>
          <script
            src="https://maps.googleapis.com/maps/api/js?key=${GOOGLE_GEOCODE_API_KEY}&callback=initMap"
          ></script>
        </body>
      </html>`;
    });
}
export default function handler(req, res) {
    return __awaiter(this, void 0, void 0, function* () {
        const parsed = parse(req.url);
        const parts = parsed.pathname.split("/");
        let response;
        try {
            if (parts.length === 3) {
                response = yield respondMap(parts[1], parts[2]);
            }
            else if (parts.length === 2) {
                response = yield tabsPage(parts[1]);
            }
            else {
                response = `<p>Please use ${escapeHtml("/spreadsheet-id/tab")}</p>`;
            }
        }
        catch (err) {
            response = err.toString();
        }
        res.setHeader("content-type", "text/html");
        res.send(response);
    });
}
